rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /projects/{projectId} {
        allow read: if true;
        allow delete: if true;
        allow update: if isProjectValid(request.resource.data);
        allow create: if isProjectValidForCreate(request.resource.data);
 
        function isProjectValid(next) {
          return getProjectAllowedKeys(next) && hasProjectCorrectKeys(next);
        }

        function isProjectValidForCreate(next) {
          let MAX_NUMBER_OF_PROJECTS = 20;
          let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
          let numberOfProjects = user.data.get('numberOfProjects', 0);
          return (
            isProjectValid(next) && 
            numberOfProjects < MAX_NUMBER_OF_PROJECTS
          );
        }
 
        match /strawberries/{strawberryId} {
          // no functinality that read; so reads are not allowed
          allow create: if isStrawberryValid(request.resource.data);
        }
      }
    }    
  }
}

function getProjectAllowedKeys(project) {
  return project.keys().hasOnly([
    'name', 
    'strawberrySize', 
    'numberOfStrawberries', 
    'breakSize', 
    'description', 
    'currentStrawberry',
    'statistics',
    'id'
  ]);
}

function hasProjectCorrectKeys(next) {
  let topFieldsAreValid = ( 
    next.get('name', '') is string  &&
    next.strawberrySize is number && next.strawberrySize > 0 &&
    next.numberOfStrawberries is number && next.numberOfStrawberries > 0 &&
    next.get('breakSize', 0) is number &&
    next.get('description', '') is string
  );
  let currentStrawberryIsValid = 'currentStrawberry' in next ? isStrawberryValid(next.currentStrawberry) : true; 
  let statisticsIsValid = 'statistics' in next ? areProjectStatisticsValid(next.statistics) : true;

  return topFieldsAreValid && currentStrawberryIsValid && statisticsIsValid;
}

function isStrawberryValid(strawberry) {
  return hasStrawberryKeysAllowed(strawberry) && areStrawberryKeysValid(strawberry);
}

function hasStrawberryKeysAllowed(strawberry) {
  return strawberry.keys().hasOnly(['size', 'timeSpent', 'startTime', 'running', 'type']);
}

function areStrawberryKeysValid(strawberry) {
  let type = strawberry.get('type', 'STRAWBERRY_TYPE_INTERVAL');
  return (
    strawberry.get('size', 0) is number &&
    strawberry.get('timeSpent', []) is list && 
    strawberry.get('startTime', []) is list &&
    strawberry.get('running', false) is bool && 
    (
      type == 'STRAWBERRY_TYPE_INTERVAL' || type == 'STRAWBERRY_TYPE_PAUSE'
    )
  );
}

function areProjectStatisticsValid(statistics) {
  return hasProjectStatisticsKeysAllowed(statistics) && hasProjectStatisticsKeysValid(statistics);
}

function hasProjectStatisticsKeysAllowed(statistics) {
  let topLevelKeysValid =  statistics.keys().hasOnly(['today', 'totalStrawberries', 'currentStreak', 'numberOfDailyCompletedGoals']);
  let todayIsValid = statistics.get('today', {}).keys().hasOnly(['date', 'completedStrawberries']);

  return topLevelKeysValid && todayIsValid;
}

function hasProjectStatisticsKeysValid(statistics) {
  return (
    statistics.get(['today', 'date'], 0) is number &&
    statistics.get(['today', 'completedStrawberries'], 0) is number &&
    statistics.get('totalStrawberries', 0) is number &&
    statistics.get('currentStreak', 0) is number
  );
}