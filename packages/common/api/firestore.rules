rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /projects/{projectId} {
        allow read: if true;
        allow write: if isProjectValid(request.resource.data);

        function isProjectValid(next) {
          return getProjectAllowedKeys(next) && projectHasCorrectFields(next);
        }

        function getProjectAllowedKeys(project) {
          return project.keys().hasOnly(['name', 'strawberrySize', 'numberOfStrawberries', 'breakSize', 'description', 'currentStrawberry']);
        }

        function projectHasCorrectFields(next) {
          return (
            ('name' in next ? next.name is string : true) &&
            ('strawberrySize' in next ? next.strawberrySize is number : true) &&
            ('numberOfStrawberries' in next ? next.numberOfStrawberries is number : true) &&
            ('breakSize' in next ? next.breakSize is number : true) &&
            ('description' in next ? next.description is string : true) && 
            ('currentStrawberry' in next ? isCurrentStrawberryValid(next.currentStrawberry) : true)
          );
        }
        // Strawberry validation
        function isCurrentStrawberryValid(strawberry) {
          return false;// currentStrawberryHasAllowedKeys(strawberry) && currentStraberryHasValidKeys(strawberry);
        }

        function currentStrawberryHasAllowedKeys(strawberry) {
          return strawberry.keys().hasOnly(['size', 'timeSpent', 'startTime', 'running', 'type']);
        }

        function currentStraberryHasValidKeys(strawberry) {
          return true || (
            'size' in strawberry ? strawberry.size is number : true
          )
        }
      }
    }    
  }
}
